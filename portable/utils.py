"""
ÈÄöÁî®Â∑•ÂÖ∑ÂáΩÊï∞
Êèê‰æõÂèØÁßªÊ§çÊÄßÊ®°ÂùóÁöÑÂü∫Á°ÄÂ∑•ÂÖ∑
"""

import sys
import platform
from pathlib import Path
from typing import Optional
from .models import SystemPlatform, ProjectStructure


def detect_system_platform() -> SystemPlatform:
    """Ê£ÄÊµãÁ≥ªÁªüÂπ≥Âè∞"""
    system = platform.system().lower()
    
    if system == "windows":
        return SystemPlatform.WINDOWS
    elif system == "linux":
        return SystemPlatform.LINUX
    elif system == "darwin":
        return SystemPlatform.MACOS
    else:
        return SystemPlatform.UNKNOWN


def get_python_version() -> str:
    """Ëé∑ÂèñPythonÁâàÊú¨"""
    return f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}"


def is_python_version_compatible(min_version: str = "3.8") -> bool:
    """Ê£ÄÊü•PythonÁâàÊú¨ÂÖºÂÆπÊÄß"""
    current = sys.version_info
    min_parts = [int(x) for x in min_version.split('.')]
    
    return (current.major, current.minor) >= (min_parts[0], min_parts[1])


def find_project_root() -> Path:
    """Êô∫ËÉΩÊü•ÊâæÈ°πÁõÆÊ†πÁõÆÂΩï"""
    return ProjectStructure.get_project_root()


def ensure_directory(path: Path) -> bool:
    """Á°Æ‰øùÁõÆÂΩïÂ≠òÂú®"""
    try:
        path.mkdir(parents=True, exist_ok=True)
        return True
    except Exception:
        return False


def is_command_available(command: str) -> bool:
    """Ê£ÄÊü•ÂëΩ‰ª§ÊòØÂê¶ÂèØÁî®"""
    import subprocess
    
    try:
        subprocess.run(
            [command, "--version"], 
            capture_output=True, 
            check=True,
            timeout=10
        )
        return True
    except (subprocess.CalledProcessError, FileNotFoundError, subprocess.TimeoutExpired):
        return False


def get_friendly_error_message(error_code: str) -> str:
    """Ëé∑ÂèñÁî®Êà∑ÂèãÂ•ΩÁöÑÈîôËØØ‰ø°ÊÅØ"""
    error_messages = {
        "python_version": "PythonÁâàÊú¨Ëøá‰ΩéÔºåÈúÄË¶Å3.8ÊàñÊõ¥È´òÁâàÊú¨",
        "uv_missing": "uvÂåÖÁÆ°ÁêÜÂô®Êú™ÂÆâË£ÖÔºåÂ∞Ü‰ΩøÁî®pip‰Ωú‰∏∫Â§áÈÄâ",
        "pip_missing": "pipÂåÖÁÆ°ÁêÜÂô®‰∏çÂèØÁî®ÔºåËØ∑Ê£ÄÊü•PythonÂÆâË£Ö",
        "config_missing": "ÈÖçÁΩÆÊñá‰ª∂Áº∫Â§±ÔºåÂ∞ÜËá™Âä®ÂàõÂª∫ÈªòËÆ§ÈÖçÁΩÆ",
        "dir_missing": "ÂøÖË¶ÅÁõÆÂΩïÁº∫Â§±ÔºåÂ∞ÜËá™Âä®ÂàõÂª∫",
        "dependency_missing": "‰æùËµñÂåÖÁº∫Â§±ÔºåÂ∞ÜËá™Âä®ÂÆâË£Ö",
        "permission_denied": "ÊùÉÈôê‰∏çË∂≥ÔºåËØ∑‰ª•ÁÆ°ÁêÜÂëòË∫´‰ªΩËøêË°å",
        "network_error": "ÁΩëÁªúËøûÊé•ÈóÆÈ¢òÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËÆæÁΩÆ"
    }
    
    return error_messages.get(error_code, "Êú™Áü•ÈîôËØØÔºåËØ∑ËÅîÁ≥ªÊäÄÊúØÊîØÊåÅ")


def print_welcome_message():
    """ÊâìÂç∞Ê¨¢Ëøé‰ø°ÊÅØ"""
    print("üé¨ Universal Video Downloader")
    print("   ÂºÄÁÆ±Âç≥Áî®ÁöÑÂ§öÂπ≥Âè∞ËßÜÈ¢ë‰∏ãËΩΩÂô®")
    print("   Ê≠£Âú®ËøõË°åÁéØÂ¢ÉÊ£ÄÊü•...")
    print()


def print_success_message():
    """ÊâìÂç∞ÊàêÂäü‰ø°ÊÅØ"""
    print("‚úÖ ÁéØÂ¢ÉÊ£ÄÊü•ÂÆåÊàêÔºå‰∏ÄÂàáÂ∞±Áª™ÔºÅ")
    print("üöÄ Ê≠£Âú®ÂêØÂä®Â∫îÁî®Á®ãÂ∫è...")
    print()


def print_progress(message: str, progress: int = 0):
    """ÊâìÂç∞ËøõÂ∫¶‰ø°ÊÅØ"""
    if progress > 0:
        bar = "‚ñà" * (progress // 5) + "‚ñë" * (20 - progress // 5)
        print(f"\r{message} [{bar}] {progress}%", end="", flush=True)
    else:
        print(f"‚è≥ {message}")