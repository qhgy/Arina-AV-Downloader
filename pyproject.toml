[project]
name = "arina-av-downloader"
version = "1.1.3"
description = "Arina AV Downloader - Thanks to Arina for 10 years of companionship"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Arina AV Downloader Team"}
]
keywords = ["video", "downloader", "youtube", "portable", "multi-platform"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
        "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Video",
    "Topic :: Internet :: WWW/HTTP",
]

dependencies = [
    "yt-dlp>=2024.11.04",
    "requests>=2.25.0",
    "colorama>=0.4.0",
    "tqdm>=4.60.0",
    "jsonschema>=4.0.0",
]

[project.optional-dependencies]
gui = [
    "PySide6>=6.0.0",
]
dev = [
    "pytest>=7.0.0",
    "black>=22.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0"
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0"
]

[project.urls]
Homepage = "https://github.com/qhgy/Arina-AV-Downloader"
Repository = "https://github.com/qhgy/Arina-AV-Downloader"
Issues = "https://github.com/qhgy/Arina-AV-Downloader/issues"

[project.scripts]
arina = "arina_cli:main"
arina-gui = "arina_gui:main"

[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["portable"]

[tool.setuptools.package-data]
"*" = ["*.md", "*.txt", "*.json", "*.toml"]

# UV工具配置
[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "black>=22.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pytest-cov>=4.0.0"
]

[tool.uv.sources]
# 可以在这里指定特定的包源
# yt-dlp = { git = "https://github.com/yt-dlp/yt-dlp.git" }

# 黑色代码格式化配置
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy类型检查配置
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Pytest配置
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage配置
[tool.coverage.run]
source = ["portable", "universal_downloader", "gui_downloader"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]