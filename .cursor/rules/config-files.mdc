---
globs: "*.json,*.md,*.txt"
description: "Configuration files and documentation standards"
---

# 配置文件和文档规范 📄

## JSON 配置文件
- 使用 UTF-8 编码保存
- 保持适当的缩进（2 或 4 个空格）
- 使用有意义的键名，采用 camelCase 或 snake_case
- 添加注释说明（JSON5 格式或单独的说明文档）
- 提供默认配置模板

## 配置文件结构
参考主要配置文件：
- [downloader_config.json](mdc:downloader_config.json) - 主配置文件
- [pyproject.toml](mdc:pyproject.toml) - Python 项目配置
- [requirements.txt](mdc:requirements.txt) - 依赖管理

## 敏感信息处理
- Cookie 信息存储在 [cookies/](mdc:cookies/) 目录
- 不要在配置文件中硬编码密码或API密钥
- 使用环境变量或单独的凭据文件
- 确保敏感文件不被版本控制

## 文档编写 (Markdown)
- 使用 UTF-8 编码
- 遵循 Markdown 语法规范
- 使用中文撰写用户文档
- 包含清晰的安装和使用说明
- 提供常见问题解答 (FAQ)

## 配置验证
- 在应用启动时验证配置文件完整性
- 提供配置错误的友好提示
- 支持配置文件的自动修复或重置
- 记录配置变更历史

## 文件命名规范
- 配置文件使用描述性名称
- 文档文件使用中文名称（如 `使用说明.md`）
- 避免使用特殊字符和空格
- 使用一致的命名约定

## 版本控制
- 提供 `.gitignore` 排除敏感文件
- 包含配置文件模板
- 记录配置格式变更
- 支持向后兼容性

## 示例配置结构
```json
{
  "version": "1.0.0",
  "download": {
    "output_dir": "./downloads",
    "max_concurrent": 3,
    "timeout": 30
  },
  "ui": {
    "theme": "default",
    "language": "zh-CN"
  },
  "advanced": {
    "debug_mode": false,
    "log_level": "INFO"
  }
}
```

## 文档结构建议
- README.md - 项目概述和快速开始
- [使用说明.md](mdc:使用说明.md) - 详细使用指南
- [DEVELOPER.md](mdc:DEVELOPER.md) - 开发者文档
- [COOKIE_GUIDE.md](mdc:COOKIE_GUIDE.md) - 特定功能说明

## 国际化 (i18n)
- 支持多语言配置
- 提供语言切换功能
- 文本资源外部化
- 考虑不同地区的使用习惯
