---
globs: "*.py"
description: "Python coding standards for video downloader project"
---

# Python 编码规范 ��

## 编码标准
- 使用 UTF-8 编码，统一在文件开头声明: `# -*- coding: utf-8 -*-`
- 遵循 PEP 8 风格指南
- 使用 4 个空格缩进，不使用 Tab
- 行长度限制为 120 字符
- 导入按以下顺序排列：标准库 -> 第三方库 -> 本地模块

## 错误处理
- 使用 `try-except` 块处理可能的异常
- 优先使用具体的异常类型而非 `Exception`
- 在网络请求和文件操作时必须包含异常处理
- 使用 [error_handler.py](mdc:portable/error_handler.py) 中的统一错误处理机制

## 资源管理
- 使用 `with` 语句管理文件和网络连接
- 及时释放资源，避免内存泄漏
- 在下载大文件时使用流式处理

## 日志记录
- 使用 Python 的 `logging` 模块
- 日志级别：DEBUG < INFO < WARNING < ERROR < CRITICAL
- 关键操作（下载开始/完成/失败）记录 INFO 级别
- 错误信息记录 ERROR 级别

## 路径处理
- 使用 `pathlib.Path` 而非 `os.path` 实现跨平台兼容
- 参考 [path_manager.py](mdc:portable/path_manager.py) 的实现
- 避免硬编码路径，使用相对路径或配置文件

## 函数设计
- 函数名使用小写字母和下划线
- 函数应该有单一职责
- 使用类型提示 (Type Hints) 增强代码可读性
- 为复杂函数添加文档字符串

## 网络请求
- 使用 `requests` 库进行 HTTP 请求
- 设置合理的超时时间
- 包含重试机制和错误处理
- 使用 User-Agent 头避免被封

## GUI 开发 (tkinter)
- 使用面向对象的方式组织GUI代码
- 将业务逻辑与界面代码分离
- 使用线程避免界面阻塞
- 提供进度反馈和错误提示

## 配置管理
- 使用 JSON 格式存储配置
- 参考 [config_manager.py](mdc:portable/config_manager.py) 的实现
- 提供默认配置和配置验证
- 敏感信息（如cookies）单独存储

## 测试规范
- 为核心功能编写单元测试
- 测试文件放在 [tests/](mdc:tests/) 目录
- 使用 `pytest` 框架
- 包含正常情况和异常情况的测试用例
